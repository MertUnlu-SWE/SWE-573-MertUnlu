"""
Django settings for mysteriumProject project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-etebo%)_nxf1pozgvb1=1$)+5cr#hzb3*#lftdx&eg!%5__4si'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG =  os.getenv("IS_DEVELOPMENT", False)

#ALLOWED_HOSTS = [os.getenv("localhost", "127.0.0.1")]
#ALLOWED_HOSTS = ["13.53.116.156"]
ALLOWED_HOSTS = [
    'mysterium.onrender.com',
    'mysterium-nginx-latest.onrender.com',
    'www.mysterium.onrender.com',
    'swe-573-mertunlu.onrender.com',
    'django_app', 
    '91.93.225.91/32', 
    '13.53.116.156', 
    '127.0.0.1',
    '172.18.0.2',
    '172.19.0.2', 
    'localhost', 
    '[::1]'
]

CSRF_TRUSTED_ORIGINS = [
    'https://mysterium.onrender.com',
    'https://mysterium-nginx-latest.onrender.com',
    'https://www.mysterium.onrender.com',
    'https://swe-573-mertunlu.onrender.com',
    'http://localhost',
]


# Application definition

INSTALLED_APPS = [
    'mysterium',
    'storages',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.middleware.cache.UpdateCacheMiddleware',
    'django.middleware.cache.FetchFromCacheMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mysteriumProject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mysteriumProject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

#DATABASES = {'default': {'ENGINE': 'django.db.backends.postgresql','NAME': 'postgres','USER': 'mysteriumMert','PASSWORD': 'Mert539Unlu','HOST': 'mysterium-db.cj6g0u6gkb0e.eu-north-1.rds.amazonaws.com','PORT': '5432'}}
load_dotenv()

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME'),
        'USER': os.getenv('DB_USER'),
        'PASSWORD': os.getenv('DB_PASSWORD'),
        'HOST': os.getenv('DB_HOST'),
        'PORT': os.getenv('DB_PORT', '5432'),
        'OPTIONS': {
            'sslmode': 'require',  # AWS RDS için SSL kullanımı
        },
    }
}


AUTHENTICATION_BACKENDS = [
    'mysterium.backends.EmailBackend',  # Adjust this to match your app name
    'django.contrib.auth.backends.ModelBackend',
]

# Password validation

# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True



# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'static'
#STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]  # Özel statik dosyalar


# Medya dosyaları
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_STORAGE_BUCKET_NAME')
AWS_S3_REGION_NAME = os.getenv('AWS_S3_REGION_NAME')
AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'

STATICFILES_FOLDER = 'static'
MEDIAFILES_FOLDER = 'media'
#STATICFILES_STORAGE = 'custom_storages.StaticFilesStorage'
#DEFAULT_FILE_STORAGE = 'custom_storages.MediaFilesStorage'

MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/media/'


STORAGES = {
    "default": {
        "BACKEND": "custom_storages.MediaFilesStorage",
    },
    "staticfiles": {
        "BACKEND": "custom_storages.StaticFilesStorage",
    }
}
#STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

import mimetypes
mimetypes.add_type("text/css", ".css", True)

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
